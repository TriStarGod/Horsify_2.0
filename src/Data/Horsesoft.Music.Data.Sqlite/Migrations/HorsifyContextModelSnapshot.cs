// <auto-generated />
using Horsesoft.Music.Data.Sqlite.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using System;

namespace Horsesoft.Music.Data.Sqlite.Migrations
{
    [DbContext(typeof(HorsifyContext))]
    partial class HorsifyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Horsesoft.Music.Data.Model.Album", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("Horsesoft.Music.Data.Model.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("Horsesoft.Music.Data.Model.Discog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ReleaseId");

                    b.HasKey("Id");

                    b.ToTable("Discog");
                });

            modelBuilder.Entity("Horsesoft.Music.Data.Model.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DriveVolume")
                        .IsRequired()
                        .HasColumnType("TEXT (1, 5)");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("TEXT (0)");

                    b.Property<string>("Hash");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.ToTable("File");
                });

            modelBuilder.Entity("Horsesoft.Music.Data.Model.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Style");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Horsesoft.Music.Data.Model.Label", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DiscogsId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("Horsesoft.Music.Data.Model.MusicalKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MusicKey")
                        .IsRequired()
                        .HasColumnType("TEXT (1, 12)");

                    b.HasKey("Id");

                    b.ToTable("MusicalKey");
                });

            modelBuilder.Entity("Horsesoft.Music.Data.Model.Song", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("AlbumId");

                    b.Property<long?>("ArtistId");

                    b.Property<long?>("BitRate");

                    b.Property<long?>("Bpm");

                    b.Property<string>("Comment");

                    b.Property<string>("Country");

                    b.Property<long?>("DiscogId");

                    b.Property<long>("FileId");

                    b.Property<long?>("GenreId");

                    b.Property<string>("ImageLocation");

                    b.Property<string>("IsDamaged")
                        .HasColumnType("BOOLEAN");

                    b.Property<long?>("LabelId");

                    b.Property<string>("LastPlayed")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("MusicalKeyId");

                    b.Property<string>("Nsfw")
                        .HasColumnName("NSFW")
                        .HasColumnType("BOOLEAN");

                    b.Property<long?>("Rating");

                    b.Property<string>("Time")
                        .HasColumnType("TIME");

                    b.Property<long?>("TimesPlayed");

                    b.Property<string>("Title");

                    b.Property<long?>("Track");

                    b.Property<long?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("DiscogId");

                    b.HasIndex("FileId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LabelId");

                    b.HasIndex("MusicalKeyId");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("Horsesoft.Music.Data.Model.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Status1")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("TEXT (1, 15)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Horsesoft.Music.Data.Model.Song", b =>
                {
                    b.HasOne("Horsesoft.Music.Data.Model.Album", "Album")
                        .WithMany("Song")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Horsesoft.Music.Data.Model.Artist", "Artist")
                        .WithMany("Song")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Horsesoft.Music.Data.Model.Discog", "Discog")
                        .WithMany("Song")
                        .HasForeignKey("DiscogId");

                    b.HasOne("Horsesoft.Music.Data.Model.File", "File")
                        .WithMany("Song")
                        .HasForeignKey("FileId");

                    b.HasOne("Horsesoft.Music.Data.Model.Genre", "Genre")
                        .WithMany("Song")
                        .HasForeignKey("GenreId");

                    b.HasOne("Horsesoft.Music.Data.Model.Label", "Label")
                        .WithMany("Song")
                        .HasForeignKey("LabelId");

                    b.HasOne("Horsesoft.Music.Data.Model.MusicalKey", "MusicalKey")
                        .WithMany("Song")
                        .HasForeignKey("MusicalKeyId");
                });
#pragma warning restore 612, 618
        }
    }
}
