<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Horsesoft.Horsify.Resource.Windows.CustomControls"
    xmlns:panels="clr-namespace:Horsesoft.Horsify.Resource.Windows.Panels"
    >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Horsesoft.Horsify.Resource;component/Style/ConverterResources.xaml" />
        <ResourceDictionary Source="/Horsesoft.Horsify.Resource;component/Style/Buttons.xaml" />
        <ResourceDictionary Source="/Horsesoft.Horsify.Resource;component/Style/Text.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type controls:AmountSelectControl}">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:AmountSelectControl}">
                    <StackPanel Orientation="Horizontal" 
                                HorizontalAlignment="Center" VerticalAlignment="Center">

                        <StackPanel.Resources>
                            <Style TargetType="RepeatButton">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Margin" Value="15"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                            </Style>
                        </StackPanel.Resources>

                        <!--DECREMENT-->
                        <RepeatButton Content="&#9664;" 
                                      x:Name="DecreaseBy10Button"
                                    Template="{StaticResource ButtonBaseNoSelectionsControlTemplate}" 
                            Visibility="{Binding ShowLargerIncrementButtons, Mode=TwoWay, Converter={StaticResource bool2vis}}"
                            />

                        <RepeatButton Content="&#9664;" x:Name="DecreaseButton"
                            Template="{DynamicResource ButtonBaseNoSelectionsControlTemplate}"                      
                            />

                        <!--AMOUNT VALUE-->
                        <TextBlock x:Name="ValueTextBlock" 
                            VerticalAlignment="Center"
                            Text="{Binding Value, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                            Style="{DynamicResource TextBlockStyle_BebasMed}"
                            />

                        <!--INCREMENT-->
                        <RepeatButton x:Name="IncreaseButton"                       
                            Content="&#9654;" 
                            Template="{DynamicResource ButtonBaseNoSelectionsControlTemplate}"
                            />

                        <RepeatButton x:Name="IncreaseBy10Button"                       
                            Content="&#9654;" 
                            Template="{DynamicResource ButtonBaseNoSelectionsControlTemplate}"
                            Visibility="{Binding ShowLargerIncrementButtons, Mode=TwoWay, Converter={StaticResource bool2vis}}"
                            />

                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


    <!--#region EXPANDER-->
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>

    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="32"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>

                                <Ellipse x:Name="circle" Fill="Transparent" StrokeThickness="0"                                            
                                             Stroke="{StaticResource Expander.Static.Circle.Stroke}" 
                                             />
                                <!--<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                          HorizontalAlignment="Center" SnapsToDevicePixels="false"
                                          Stroke="{StaticResource Expander.Static.Arrow.Stroke}" 
                                          StrokeThickness="2" VerticalAlignment="Center"/>-->
                                <!--<ContentPresenter Grid.Row="1"                                                      
                                                      HorizontalAlignment="Center"
                                                      Content="{StaticResource ratingViewBox}"/>-->

                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <!--<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <!--<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>-->
                            <!--<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>-->
                            <!--<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <!--<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>-->
                            <!--<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>-->
                            <!--<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>-->
                            <!--<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <!--<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False"/>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ExpandDirection" Value="Right"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" 
                                              Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}"
                                              FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" 
                                              FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" 
                                              FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                              Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" 
                                              Style="{StaticResource ExpanderRightHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  Margin="{TemplateBinding Padding}" Visibility="Collapsed"                                                   
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--RATING CONTROL - SINGLE WITH CLEAR-->
    <Style TargetType="{x:Type controls:RatingControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:RatingControl}">

                    <ControlTemplate.Resources>
                        <Style TargetType="ToggleButton">
                            <Setter Property="RenderTransformOrigin" Value="0.5,0.5">

                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>

                    <WrapPanel>
                        <Button x:Name="clearrating"                          
                          Width="{TemplateBinding StarWidth}"
                          Background="PaleVioletRed"                          
                          MaxHeight="20" FontSize="12"
                          Content="X" FontWeight="DemiBold"                          
                          />
                        <ToggleButton x:Name="rating1"            
                                      RenderTransformOrigin="0.5,0.5"
                          Width="{TemplateBinding StarWidth}"                                      
                          IsChecked="{TemplateBinding RatingValue, 
                            ConverterParameter=1,
                            Converter={StaticResource ratingconverter}}"
                          Template="{DynamicResource RatingButton}">
                            <ToggleButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="{TemplateBinding StarRotation}"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ToggleButton.RenderTransform>
                        </ToggleButton>

                        <ToggleButton x:Name="rating2" 
                          Width="{TemplateBinding StarWidth}"
                          IsChecked="{TemplateBinding RatingValue, 
                            ConverterParameter=64,
                            Converter={StaticResource ratingconverter}}"
                          Template="{DynamicResource RatingButton}"
                                      RenderTransformOrigin="0.5,0.5"
                                      >
                            <ToggleButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="{TemplateBinding StarRotation}"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ToggleButton.RenderTransform>
                        </ToggleButton>

                        <ToggleButton x:Name="rating3" 
                          Width="{TemplateBinding StarWidth}"
                          IsChecked="{TemplateBinding RatingValue, 
                            ConverterParameter=128,
                            Converter={StaticResource ratingconverter}}"
                          Template="{DynamicResource RatingButton}">
                            <ToggleButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="{TemplateBinding StarRotation}"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ToggleButton.RenderTransform>
                        </ToggleButton>

                        <ToggleButton x:Name="rating4" 
                          Width="{TemplateBinding StarWidth}" 
                          IsChecked="{TemplateBinding RatingValue, 
                            ConverterParameter=196,
                            Converter={StaticResource ratingconverter}}"
                          Template="{DynamicResource RatingButton}">
                            <ToggleButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="{TemplateBinding StarRotation}"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ToggleButton.RenderTransform>
                        </ToggleButton>

                        <ToggleButton x:Name="rating5" 
                          Width="{TemplateBinding StarWidth}"
                          IsChecked="{TemplateBinding RatingValue, 
                            ConverterParameter=255,
                            Converter={StaticResource ratingconverter}}"
                          Template="{DynamicResource RatingButton}">
                            <ToggleButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="{TemplateBinding StarRotation}"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ToggleButton.RenderTransform>
                        </ToggleButton>
                    </WrapPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled" Value="True"/>
    </Style>

    <!--RATING CONTROL TEMPLATE - RANGED -->
    <Style TargetType="{x:Type controls:RatingRangeControl}">
        <Setter Property="IsEnabled" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:RatingRangeControl}">
                    <Grid>
                        <StackPanel Orientation="Vertical">
                            <controls:RatingControl
                                StarWidth="{TemplateBinding StarWidth}"
                                StarRotation="{TemplateBinding StarRotation}"
                                VerticalAlignment="Center" HorizontalAlignment="Center"
                                RatingValue="{Binding Path=RangeLower, 
                                    RelativeSource={RelativeSource AncestorType={x:Type controls:RatingRangeControl}}, 
                                    Mode=TwoWay}"/>
                            <controls:RatingControl
                                StarWidth="{TemplateBinding StarWidth}"
                                StarRotation="{TemplateBinding StarRotation}"
                                VerticalAlignment="Center" HorizontalAlignment="Center"
                                RatingValue="{Binding Path=RangeUpper, 
                                    RelativeSource={RelativeSource AncestorType={x:Type controls:RatingRangeControl}}, 
                                    Mode=TwoWay}"/>
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--HorsifySearchButton-->
    <Style TargetType="controls:HorsifySearchButton">
        <Setter Property="ButtonContentSize" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:HorsifySearchButton}">

                    <!--TEXT WITH BUTTON - Empty string doesn't show button content-->
                    <StackPanel Orientation="Horizontal">

                        <ContentPresenter Content="{TemplateBinding Property=Button.Content}"/>
                        <!--SEARCH TEXT-->
                        <TextBlock x:Name="ButtonInfoText" Margin="5,0"
                           VerticalAlignment="Center"                  
                           Visibility="{TemplateBinding Visibility}"
                           FontSize="{TemplateBinding FontSize}" 
                           Text="{TemplateBinding SearchString}"/>

                    </StackPanel>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:ButtonWithLabel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:ButtonWithLabel">
                    <Border CornerRadius="5" Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">

                        <StackPanel x:Name="IconLabelContainer" Margin="3">
                            <Label FontSize="{TemplateBinding FontSize}" Content="{TemplateBinding Text}"/>
                            <ContentPresenter Width="{TemplateBinding Width}"
                                              Height="{TemplateBinding Height}"
                                              />
                        </StackPanel>

                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region TEXTBOX WITH CARET INDEX-->
    <Style TargetType="{x:Type controls:TextboxWithCaretIndex}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>

        <Setter Property="FontSize" Value="32"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="10"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region KEYBOARD-->
    <Style TargetType="{x:Type controls:OnScreenKeyboard}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:OnScreenKeyboard}">
                    <Border CornerRadius="0, 0, 20,20" 
                            BorderBrush="Black"
                            BorderThickness="4"
                            Background="{DynamicResource BackgroundGradient5}">
                        <Grid Margin="5">
                            <!--#region ROW/COL DEFS-->
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <!--#endregion-->

                            <Grid.Resources>
                                <!--KEYBOARD BUTTON WITH COMMAND - COMMAND PARAM IS THE BUTTONS CONTENT-->
                                <Style TargetType="Button" BasedOn="{StaticResource TransparentButtonBases}">
                                    <Setter Property="Command" Value="{x:Static controls:OnScreenKeyboard.SendKeyCommand}"/>
                                    <Setter Property="CommandParameter" Value="{Binding Content, RelativeSource={RelativeSource Self}}"/>
                                    <Setter Property="Margin" Value="3"/>
                                    <Setter Property="Width" Value="42"/>
                                    <Setter Property="Height" Value="42"/>
                                </Style>
                            </Grid.Resources>

                            <!--CursorPosition="{Binding CursorPosition, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"-->
                            <Grid>

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <controls:TextboxWithCaretIndex x:Name="SearchText" 
                                                            IsEnabled="True"
                                                            Margin="5"                                                             
                                                            FontSize="{TemplateBinding FontSize}"
                                                            CursorPosition="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CursorPosition, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                            />

                                <Button Content="Del" Grid.Column="1" Width="90" HorizontalAlignment="Right"/>
                            </Grid>

                            <!--TOP ROW-->
                            <StackPanel Grid.Row="1" Orientation="Horizontal">
                                <Button Content="1"/>
                                <Button Content="2"/>
                                <Button Content="3"/>
                                <Button Content="4"/>
                                <Button Content="5"/>
                                <Button Content="6"/>
                                <Button Content="7"/>
                                <Button Content="8"/>
                                <Button Content="9"/>
                                <Button Content="0"/>
                                <Button Content="&amp;" />
                                <Button Content="*" />
                            </StackPanel>

                            <StackPanel Grid.Row="2" 
                                        Orientation="Horizontal" 
                                        x:Name="Stack"
                                        Margin="0.5cm,0"
                                        >
                                <Button Content="Q" />
                                <Button Content="W" />
                                <Button Content="E" />
                                <Button Content="R" />
                                <Button Content="T" />
                                <Button Content="Y" />
                                <Button Content="U" />
                                <Button Content="I" />
                                <Button Content="O" />
                                <Button Content="P" />
                                <Button Content="%" />
                            </StackPanel>

                            <!--MID ROW-->
                            <StackPanel Grid.Row="3" 
                                        Margin="1.25cm,0" 
                                        Orientation="Horizontal"
                                        >
                                <Button Content="A" />
                                <Button Content="S" />
                                <Button Content="D" />
                                <Button Content="F" />
                                <Button Content="G" />
                                <Button Content="H" />
                                <Button Content="J" />
                                <Button Content="K" />
                                <Button Content="L" />
                                <Button Content="!" />
                                <Button Content="'" />
                            </StackPanel>

                            <!--BOTTOM ROW-->
                            <StackPanel Grid.Row="4" Margin="2.0cm,0" 
                                        Orientation="Horizontal">
                                <Button Content="Z" />
                                <Button Content="X" />
                                <Button Content="C" />
                                <Button Content="V" />
                                <Button Content="B" />
                                <Button Content="N" />
                                <Button Content="M" />
                                <Button Content="."/>
                                <Button Content="?" />
                                <!--SEND THE TEXTBOXES SELECTIONSTART INDEX IN-->
                            </StackPanel>

                            <StackPanel Grid.Row="5" Orientation="Horizontal"
                                        HorizontalAlignment="Center"
                                        >
                                <Button Content="SPACE" CommandParameter=" "
                                    HorizontalAlignment="Left"   MinWidth="7cm"                                  
                                    />
                                <Button Content="Clr" Width="95"/>
                            </StackPanel>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

</ResourceDictionary>
