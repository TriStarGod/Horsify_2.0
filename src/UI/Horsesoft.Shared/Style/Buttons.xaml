<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:customcontrols="clr-namespace:Horsesoft.Horsify.Resource.Windows.CustomControls">

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

    <!--#region METAL BUTTONS-->
    <Style x:Key="ButtonMetal" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource Brush_Metal}"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="35"/>
    </Style>
    
    <Style x:Key="ButtonSearchMetal" BasedOn="{StaticResource ButtonMetal}" TargetType="Button">
        <Setter Property="Content" Value="&#128270;"/>
    </Style>
    
    <Style x:Key="ButtonQueueMetal" BasedOn="{StaticResource ButtonMetal}" TargetType="Button">
        <Setter Property="Content" Value="&#9861;"/>
    </Style>

    <Style x:Key="ButtonEditMetal" BasedOn="{StaticResource ButtonMetal}" TargetType="Button">
        <Setter Property="Content" Value="&#9998;"/>
    </Style>

    <Style x:Key="ButtonMusicMetal" BasedOn="{StaticResource ButtonMetal}" TargetType="Button">
        <Setter Property="Content" Value="&#127925;"/>
    </Style>
    
    <Style x:Key="ButtonHouseMetal" BasedOn="{StaticResource ButtonMetal}" TargetType="Button">
        <Setter Property="Content" Value="Create"/>
    </Style>

    <Style x:Key="ButtonMetalRounded" TargetType="Button"></Style>
    
    <!--#endregion-->
    
    <!--BUTTONS-->
    <ControlTemplate x:Key="ButtonBaseNoSelectionsControlTemplate" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Background="{TemplateBinding Background}" 
                SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                              Content="{TemplateBinding Content}" 
                              ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                              Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>-->
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <!--<Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>-->
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <!--<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" TargetName="border" Value="Transparent"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>-->
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="Style_ButtonNoEffects" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="20">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--BUTTON BASE TEMPLATE - USED IN DJ HORSIFY ENABLE BUTTON-->
    <ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
                CornerRadius="5"
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" 
                                  ContentTemplate="{TemplateBinding ContentTemplate}" 
                                  Content="{TemplateBinding Content}" 
                                  ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                  Focusable="False" 
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                  Margin="{TemplateBinding Padding}" 
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>-->
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <!--<Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>-->
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <!--<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" TargetName="border" Value="Transparent"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>-->
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--#region BUTTONS-->

    <Style x:Key="ButtonTopMenuStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="border" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
                                        SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"                                                  
                                                  RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <Border Style="{DynamicResource BorderBlurredEdge}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Background" Value="Transparent"/>-->
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Width" TargetName="border" Value="50"/>
                            <Setter Property="Height" TargetName="border" Value="35"/>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonTopMenuWithoutBlurStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="border" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
                                        SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"                                                  
                                                  RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <!--<ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Width" TargetName="border" Value="40"/>
                                    <Setter Property="Height" TargetName="border" Value="40"/>
                                </Trigger>
                            </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonSmartMenuStyle" BasedOn="{StaticResource ButtonTopMenuStyle}" 
                   TargetType="{x:Type customcontrols:SmartButton}"/>

    <!--#endregion-->



    <!--#region EXPANDERS-->
    <Style TargetType="Expander">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="Silver"/>
        <Setter Property="Margin" Value="20,40"/>
        <Setter Property="ExpandDirection" Value="Right"/>
        <Setter Property="IsTabStop" Value="False"/>
    </Style>
    <!--#endregion-->

    <!--#region Toggle buttons-->

    <!--TOGGLE RED ON/OFF-->
    <ControlTemplate x:Key="ToggleButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">

                <Ellipse x:Name="OnOffLight" 
                             Stroke="Black" StrokeThickness="2"
                         Stretch="Fill"
                                     Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"    
                                    HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                     >

                    <Ellipse.Style>
                        <Style TargetType="Ellipse">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsEnabled}" Value="False" >
                                    <Setter Property="Fill" Value="Red"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsEnabled}" Value="True">
                                    <Setter Property="Fill" Value="Green"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>

                    </Ellipse.Style>
                </Ellipse>

                <TextBlock Text="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" 
                               VerticalAlignment="Center"
                               HorizontalAlignment="Center"/>
            </Grid>

            <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>-->
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <!--<Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>-->
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <!--<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>-->
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->
    
    <!--SEE THROUGH SCREEN BUTTONS-->

    <Style x:Key="TransparentButtonBases" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{DynamicResource BackgroundGradient5}"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundGradient3}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="55"/>
        <Setter Property="Template" Value="{StaticResource ButtonBaseControlTemplate1}"/>
    </Style>

    <!--ON SCREEN KEYBOARD BUTTONS-->
    <Style x:Key="KeyboardButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="FontFamily" Value="Impact"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Width" Value="1.5cm"/>
        <Setter Property="Height" Value="1.5cm"/>
    </Style>


    <!--CLOSE BUTTON-->
    <Style x:Key="BtnCloseStyle" TargetType="Button" BasedOn="{StaticResource TransparentButtonBases}">
        <Setter Property="Content" Value="X"/>
        <Setter Property="Background" Value="Red"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="250, 25"/>
        <Setter Property="FontSize" Value="46"/>
        <Setter Property="Command" Value="{Binding CloseViewCommand}"/>
    </Style>


    <!--RATING BUTTON-->
    <ControlTemplate x:Key="RatingButton" TargetType="ToggleButton">
        <Viewbox Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
            <Canvas x:Name="svg14" 
                          Width="24"
                          Height="24"
                Background="Transparent">
                <Canvas.RenderTransform>
                    <MatrixTransform Matrix="0.89576271 0 0 0.89576271 1.1745763 -919.8844"/>
                </Canvas.RenderTransform>
                <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Name="path8"
                          Fill="{TemplateBinding Background}"  
                          Width="{TemplateBinding Width}"
                          Height="{TemplateBinding Height}"
                          Stroke="Black" StrokeThickness="0.45">
                    <Path.Data>
                        <PathGeometry Figures="m 22 1038.2 c 0 0.2 -0.104 0.4 -0.312 0.6 l -4.363 4.2 1.033 6.1 c 0.008 0 0.012 0.1 0.012 0.2 0 0.2 -0.044 0.3 -0.132 0.4 -0.08 0.1 -0.2 0.2 -0.361 0.2 -0.152 0 -0.312 0 -0.48 -0.1 l -5.397 -2.9 -5.3966 2.9 c -0.1763 0.1 -0.3366 0.1 -0.4808 0.1 -0.1683 0 -0.2965 -0.1 -0.3846 -0.2 -0.0802 -0.1 -0.1202 -0.2 -0.1202 -0.4 0 0 0.008 -0.1 0.024 -0.2 l 1.0337 -6.1 -4.375 -4.2 C 2.1002 1038.6 2 1038.4 2 1038.2 c 0 -0.3 0.2244 -0.5 0.6731 -0.5 l 6.0336 -0.9 2.7043 -5.5 c 0.152 -0.3 0.349 -0.5 0.589 -0.5 0.24 0 0.437 0.2 0.589 0.5 l 2.704 5.5 6.034 0.9 c 0.449 0 0.673 0.2 0.673 0.5"
                                      FillRule="Nonzero"/>
                    </Path.Data>
                </Path>
            </Canvas>
        </Viewbox>

        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="DarkGray"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#FFF1C40F"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>